package proyecto;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.basex.core.cmd.Find;
import org.basex.examples.api.BaseXClient;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.parsers.*;
import java.io.*;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Accumulators;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Projections;
import com.mongodb.client.model.Sorts;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;

import static com.mongodb.client.model.Filters.gt;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Updates.inc;
import static com.mongodb.client.model.Updates.set;
import static com.mongodb.client.model.Updates.addToSet;

public class App {
	static Scanner sc;
	static MongoClient mongoClient;
	static MongoDatabase database=null;
	static BaseXClient session=null;
	private static MongoCollection<Document> coleccion=null;
	private static String idClienteSesion=null;
	private static Document docClienteSesion=null;
	
	public static void main(String[] args) {
		sc=new Scanner(System.in);
		int optionMenu=0;
		do {
			optionMenu=menu();
			switch (optionMenu) {
			
			//CONSULTAS EN BASE DE DATOS XML
			case 1:
				bdXML();
				break;
				
			//CONSULTAS EN BASE DE DATOS MONGODB
			case 2:
				bdMongo();
				break;
			
			//SALIMOS
			case 3:
				System.out.println("SALIENDO..");
				break;
			default:
				System.out.println("Debes escribir un número entre el 1 y el 3.");
				break;
			}
		} while (optionMenu!=3);
		
	}
	private static void bdMongo() {
		mongoClient=MongoClients.create("mongodb+srv://paulasotelo99:abc123.@cluster0.rh5crpr.mongodb.net/");
		database=mongoClient.getDatabase("tienda");
		
		int option;
		do {
			option=mostrarMenuMongo();
			switch (option) {
			case 1:
				nuevoCliente();
				break;
			case 2:
				inicioSesion();
				break;
			case 3:
				borrarCliente();
				break;
			case 4:
				modificarCliente();
				break;
			case 5:
				anhadirProductoCarrito();
				break;
			case 6:
				mostrarCarrito();
				break;
			case 7:
				mostrarPedidos();
				break;
			case 8:
				pagarCarrito();
				break;
			case 9:
				totalCarritosCliente();
				break;
			case 10:
				totalPedidosCliente();
				break;
			case 11:
				break;
			default:
				break;
			}
			
		} while (option!=11);
		
	}
	private static void totalPedidosCliente() {
		//Consulta 2: Teniendo en cuenta todos los clientes, obtener el total gastado por cada cliente en todos sus pedidos.
		seleccionarColeccion("pedidos");
		AggregateIterable<Document> iterDoc = coleccion.aggregate(Arrays.asList(
		    Aggregates.group(
		        "$cliente_id",
		        Accumulators.sum("sumaPedidos", "$total"), // Calcula el total de los pedidos por cliente
		        Accumulators.sum("numPedidos", 1) // Calcula el número de pedidos por cliente
		    )
		));

		for (Document document : iterDoc) {
		    System.out.println("Cliente: " + document.getString("_id") + 
		                       " ----- Total gastado: " + document.getDouble("sumaPedidos") + "€" +
		                       " ----- Número de pedidos: " + document.getInteger("numPedidos"));
		}

	}
	private static void totalCarritosCliente() {
		//Consulta 1: Teniendo en cuenta todos los clientes, calcular el total de la compra para cada carrito 
		//y listar los resultados ordenados por el total de forma ascendente. (No es necesario tener en cuenta
		//la multiplicación de precio_unitario * cantidad con sumar los precio_unitario es suficiente)
		seleccionarColeccion("carritos");
		AggregateIterable<Document> iterDoc = coleccion.aggregate(Arrays.asList(
			    Aggregates.unwind("$productos"), // Descompone el array de productos en documentos individuales
			    Aggregates.group("$cliente_id", Accumulators.sum("sumaProductos", 
			            new Document("$multiply", Arrays.asList("$productos.cantidad", "$productos.precio_unitario")))), // Calcula la suma de los precios unitarios para cada cliente
			    Aggregates.sort(Sorts.ascending("totalCompra")) // Ordena los resultados por el total de compra de forma ascendente
			));

			for (Document document : iterDoc) {
				System.out.println("Cliente: " + document.getString("_id") + 
	                       " ----- Total gastado: " + document.getDouble("sumaProductos") + "€" );
			}

		
	}
	private static void pagarCarrito() {
		//Pagar el carrito de un cliente: se mostrará el carrito junto con una orden de confirmación.
		//Si la orden es positiva se pasarán todos los productos a formar parte de un nuevo pedido.
		
		seleccionarColeccion("carritos");
		FindIterable<Document> iterDoc=coleccion.find(eq("cliente_id",idClienteSesion));
		if (!iterDoc.iterator().hasNext()) {
			System.out.println("No tienes artículos en tu carrito");
		}else {
			//Obtenemos el resultado del carrito
			AggregateIterable<Document> iterCarrito=mostrarCarrito();
			ArrayList<Document> listaProductos = new ArrayList<>();
			
			String confirmación=pedirString("Deseas proceder al pago? (si/no)");
			if (confirmación.equals("si")) {			
				//Creamos documento de Pedido
				Document docPedido=new Document();
				docPedido.append("cliente_id", idClienteSesion);
				Double precioTotal = null;
				//Iteramos sobre los productos y los añadimos a la lista
				for (Document document : iterCarrito) {
				    List<Document> productos = document.getList("productos", Document.class);
				    for (Document producto : productos) {
				        listaProductos.add(producto);
				    }
				    precioTotal = document.getDouble("sumaProductos");
				}
				docPedido.append("productos", listaProductos)
				.append("total", precioTotal)
				.append("fecha_pedido", new Date());
				
				seleccionarColeccion("pedidos");
				coleccion.insertOne(docPedido);
				System.out.println("Pedido realizado con éxito");
				
				//Borramos el carrito correspondiente
				seleccionarColeccion("carritos");
				DeleteResult dr = coleccion.deleteOne(eq("cliente_id",idClienteSesion));

			    if(dr.getDeletedCount() > 0){
			         System.out.println("El carrito se ha vaciado");
			    }else{
			         System.out.println("No se ha actualizado ningún documento");
			    }
			}
		}
		
		
	}
	private static void mostrarPedidos() {
		//.Mostrar pedidos del cliente.
		seleccionarColeccion("pedidos");

		FindIterable<Document> pedidosCliente=coleccion.find(eq("cliente_id",idClienteSesion));
		
		if (!pedidosCliente.iterator().hasNext()) {
			System.out.println("El cliente actual no tiene pedidos realizados");
		}else{
			for (Document document : pedidosCliente) {
				System.out.println(document.toString());
			}
		}
		
	}
	private static AggregateIterable<Document> mostrarCarrito() {
		//.Mostrar el carrito del cliente. Se mostrarán los datos del carrito y el precio total
		seleccionarColeccion("carritos");

		AggregateIterable<Document> iterDoc = coleccion.aggregate(Arrays.asList(
			    Aggregates.match(eq("cliente_id", idClienteSesion)),
			    Aggregates.unwind("$productos"), // Descompone el array de productos en documentos individuales
			    Aggregates.group(null, 
			        Accumulators.sum("sumaProductos", 
			            new Document("$multiply", Arrays.asList("$productos.cantidad", "$productos.precio_unitario"))
			        ), // Calcula el precio total de cada producto y luego suma todos los precios
			        Accumulators.push("productos", "$productos") // Guarda los productos en un array
			    ),
			    Aggregates.project(Projections.fields(
			        Projections.excludeId(), // Excluye el campo _id del resultado
			        Projections.computed("productos", "$productos"), // Proyecta solo el campo "productos"
			        Projections.computed("sumaProductos", "$sumaProductos") // Proyecta también el campo "sumaProductos"
			    ))
			));

		if(!iterDoc.iterator().hasNext()) {
			System.out.println("No hay productos añadidos al carrito");
		}
			for (Document document : iterDoc) {
			    List<Document> productos = document.getList("productos", Document.class);
			    for (Document producto : productos) {
			        System.out.println("Producto: " + producto.getString("nombre"));
			        System.out.println("Cantidad: " + producto.getInteger("cantidad"));
			        System.out.println("Precio unitario: " + producto.getDouble("precio_unitario"));
			        System.out.println("--------------------");
			    }
			    Double precioTotal = document.getDouble("sumaProductos");
			    System.out.println("Precio total de los productos en el carrito: " + precioTotal);
			}
			return iterDoc;
		
	}
	private static void anhadirProductoCarrito() {
		//Añadir producto al carrito del cliente. Se pedirá: id del producto y cantidad, 
		//así como si se desea seguir introduciendo más productos.
		
		//Conectamos con BaseX para acceder a los productos
		conectarBaseX();
		//Seleccionamos la coleccion "carritos"
		seleccionarColeccion("carritos");
		//Creamos un array para la lista de productos
		ArrayList<Document> listaProductos = new ArrayList<>();
		
		String seguir;
		do {
			int idProducto=pedirInt("Introduce el id del producto a añadir");
			int cantidad=pedirInt("Introduce la cantidad del producto a añadir");
			
			//Creamos consulta para seleccionar el producto con la id correspondiente
			String query = "for $producto in /productos/producto "
					+ "where $producto/id="+idProducto+" "
					+ "return $producto";
			
			BaseXClient.Query baseXQuery;
			String productosXML = null;
			try {
				//Ejecutamos la query para obtener los productos
				baseXQuery = session.query(query);
			    productosXML = baseXQuery.execute();
				 // Parsear el resultado XML de la consulta de BaseX
			    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			    DocumentBuilder builder = factory.newDocumentBuilder();
			    InputSource is = new InputSource(new StringReader(productosXML));
			    org.w3c.dom.Document doc = (org.w3c.dom.Document) builder.parse(is);

			    // Obtener el elemento producto
			    NodeList productos = doc.getElementsByTagName("producto");
			    Node producto = productos.item(0);
				
				int id =  0;
				String nombre = null;
				Double precio = null;
				int disponibilidad = 0;
				Document docProducto;
			
				//Comprobamos que existe el producto
				if(producto.equals(null)) {
					System.out.println("No existe ese producto, introduce otro.");
				}else {
					if (producto.getNodeType() == Node.ELEMENT_NODE) {
		                Element elementoProducto = (Element) producto;
		                // Extraer los datos del producto del XML
		                id = Integer.parseInt(elementoProducto.getElementsByTagName("id").item(0).getTextContent());
		                nombre = elementoProducto.getElementsByTagName("nombre").item(0).getTextContent();
		                precio = Double.parseDouble(elementoProducto.getElementsByTagName("precio").item(0).getTextContent());
		                disponibilidad = Integer.parseInt(elementoProducto.getElementsByTagName("disponibilidad").item(0).getTextContent());	                     
		            }	            
		            if(cantidad>disponibilidad) {
		            	System.out.println("No hay suficiente stock de este producto");
		            }else {
		            	//Creamos el docProducto 
		            	docProducto=new Document();
		            	docProducto.append("producto_id", id)
		            	.append("nombre", nombre)
		            	.append("cantidad", cantidad)
		            	.append("precio_unitario", precio);
		            	
		            	//Buscamos si el cliente tiene algún carrito
		            	FindIterable<Document> carritoCliente=coleccion.find(eq("cliente_id",idClienteSesion));
		            	if (!carritoCliente.iterator().hasNext()) {
		        			//Si no tiene carrito creamos uno
		            		Document docCarrito=new Document();
		            		docCarrito.append("cliente_id", idClienteSesion);
		            		listaProductos.add(docProducto);
		            		docCarrito.append("productos", listaProductos);
		            		
		            		coleccion.insertOne(docCarrito);
		            		System.out.println("Producto agregado a carrito.");
		        		}else{
		        			UpdateResult ur=coleccion.updateOne(eq("cliente_id",idClienteSesion), addToSet("productos",docProducto));
		        			if(ur.getModifiedCount() > 0){
		                        System.out.println("Producto agregado a carrito.");
		                    }else{
		                        System.out.println("No se ha podido agregar el producto");
		                    }
		        		}
		            	//Actualizamos el stock del producto en BaseX
		            	int nuevoValorCampo=disponibilidad-cantidad;
		            	ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/disponibilidad with " + nuevoValorCampo);
		            }
				}           
			} catch (IOException | ParserConfigurationException | SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			seguir = pedirString("Seguir introduciendo productos? (si/no)");
        }while(!seguir.equalsIgnoreCase("no"));	
	}
	private static void modificarCliente() {
		//Modificar el valor de un campo de la información del cliente.
		seleccionarColeccion("clientes");
		
		HashMap<String, String> parametrosCliente = new HashMap<>();
        parametrosCliente.put("nombre", "string");
        parametrosCliente.put("_id", "string");
        parametrosCliente.put("direccion", "string");
        Boolean option=false;
        do {
        	String campo=pedirString("Que campo deseas modificar?(nombre/_id/direccion)");
        	
        	Object key=parametrosCliente.get(campo);
        	if(key.equals(null)) {
        		option=false;
        	}else  {
        		option=true;
        		String valor_campo=pedirString("Introduce el nuevo valor de "+campo+":");
                UpdateResult ur = coleccion.updateOne(new Document("_id", idClienteSesion), set(campo, valor_campo));
                
                if(ur.getModifiedCount() > 0){
                    System.out.println("Actualizacion correcta. " + ur.getModifiedCount() + " documentos actualizados.");
                }else{
                    System.out.println("No se ha actualizado ningún documento");
                }
			}
            
		} while (option==false);
	
	}
	private static void borrarCliente() {
		//Borrar un cliente.
		seleccionarColeccion("clientes");
		String id=pedirString("Introduce el email del cliente a borrar");
		DeleteResult dr = coleccion.deleteOne(eq("cliente_id",id));

	    if(dr.getDeletedCount() > 0){
	         System.out.println("Actualizacion correcta. " + dr.getDeletedCount() + " documentos actualizados.");
	    }else{
	         System.out.println("No se ha actualizado ningún documento");
	    }
	}
	private static void inicioSesion() {
		//Identificar cliente según el email. Dado el email se obtendrá el ID del cliente de forma que las siguientes consultas
		//se harán sobre ese cliente. Para cambiar de cliente se tendrá que volver a seleccionar esta opción.
		seleccionarColeccion("clientes");
		String email=pedirString("Introduce email para identificarte");
		
		FindIterable<Document> iterDoc=coleccion.find(eq("_id",email));
		if (!iterDoc.iterator().hasNext()) {
		    System.out.println("No se encontraron clientes registrados con el correo electrónico: " + email);
		} else {
		    for (Document document : iterDoc) {
		        System.out.println(document);
		        idClienteSesion=email;
		        //docClienteSesion=document;
		        System.out.println("Sesion iniciada con "+email);
		    }
		}
	}
	private static void nuevoCliente() {
		//Crear un nuevo cliente (no podrá haber email repetidos)
		seleccionarColeccion("clientes");
		
		HashMap<String, String> parametrosCliente = new HashMap<>();
        parametrosCliente.put("nombre", "string");
        parametrosCliente.put("_id", "string");
        parametrosCliente.put("direccion", "string");
        
        Document docCliente=crearDocumento(parametrosCliente);
        try {
        	coleccion.insertOne(docCliente);
		} catch (Exception e) {
			System.out.println("El correo introducido ya está en uso");
		}
		
	}
	 private static void seleccionarColeccion(String nombreColeccion){
	       if(database == null)
	            database = mongoClient.getDatabase("tienda");
	       try{
	           coleccion = database.getCollection(nombreColeccion);
	       }catch (Exception e){
	           database.createCollection(nombreColeccion);
	           coleccion = database.getCollection(nombreColeccion);
	       }
	 }
	 private static Document crearDocumento(HashMap<String, String> parametros) {
	        Document documento = new Document();
	        for (Map.Entry<String, String> entry : parametros.entrySet()){
	            if(entry.getValue().equalsIgnoreCase("int")){
	                documento.append(entry.getKey(), pedirInt("Introduzca el valor del campo: " + entry.getKey()));

	            }else if(entry.getValue().equalsIgnoreCase("string")){
	                documento.append(entry.getKey(), pedirString("Introduzca el valor del campo: " + entry.getKey()));

	            }else if(entry.getValue().equalsIgnoreCase("double")){
	                documento.append(entry.getKey(), pedirDouble("Introduzca el valor del campo: " + entry.getKey()));

	            }else if(entry.getValue().equalsIgnoreCase("boolean")){
	                String entrega = pedirString("Introduzca el valor del campo: " + entry.getKey());
	                documento.append(entry.getKey(), entrega.equalsIgnoreCase("si"));
	            }
	        }
	        return documento;
	 }
	public static int mostrarMenuMongo() {
		while (true) {
			try {
				System.out.println("1.Crear un nuevo cliente (no podrá haber email repetidos).\r\n"
						+ "2.Identificar cliente según el email. Dado el email se obtendrá el ID del cliente de forma que las siguientes consultas \r\n"
						+ " se harán sobre ese cliente. Para cambiar de cliente se tendrá que volver a seleccionar esta opción.\r\n"
						+ "3.Borrar un cliente.\r\n"
						+ "4.Modificar el valor de un campo de la información del cliente.\r\n"
						+ "5.Añadir producto al carrito del cliente. Se pedirá: id del producto y cantidad, así como si se desea seguir introduciendo \r\n"
						+ " más productos.\r\n"
						+ "6.Mostrar el carrito del cliente. Se mostrarán los datos del carrito y el precio total.\r\n"
						+ "7.Mostrar pedidos del cliente.\r\n"
						+ "8.Pagar el carrito de un cliente: se mostrará el carrito junto con una orden de confirmación.\r\n "
						+ "Si la orden es positiva se pasarán todos los productos a formar parte de un nuevo pedido.\r\n"
						+ "9.Consulta 1: Teniendo en cuenta todos los clientes, calcular el total de la compra para cada carrito \r\n"
						+ " y listar los resultados ordenados por el total de forma ascendente. (No es necesario tener en cuenta \r\n"
						+ " la multiplicación de precio_unitario * cantidad con sumar los precio_unitario es suficiente).\r\n"
						+ "10.Consulta 2: Teniendo en cuenta todos los clientes, obtener el total gastado por cada cliente en todos sus pedidos.\r\n"
						+ "11.Atrás");
		
						return sc.nextInt();
			}catch (Exception e) {
			// TODO: handle exception
			}
		}
	}
	public static int menu() {
		while (true) {
			try {
				System.out.println("1. CONSULTAS BASE DE DATOS XML\r\n"
						+ "2. CONSULTAS BASE DE DATOS MONGODB\r\n"
						+ "3. SALIR");
				return sc.nextInt();
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
	}
	
	public static int mostrarMenuXML() {
		
		while (true) {
			try {
				System.out.println("1.Modificar el valor de un elemento de un XML según un ID.\r\n"
						+ "2.Eliminar un producto según su ID.\r\n"
						+ "3.Consulta 1: Obtener todos los productos por orden alfabético del nombre \r\n"
						+ "(se mostrarán los siguientes campos: id, nombre, precio, disponibilidad y categoria).\r\n"
						+ "4.Consulta 2: Listar productos con una disponibilidad mayor a X unidades \r\n"
						+ "(se mostrarán los siguientes campos: id, nombre, precio, disponibilidad y categoria).\r\n"
						+ "5.Consulta 3: Mostrar la categoría, el nombre y el precio del producto más caro para cada categoría.\r\n"
						+ "En el caso de haber varios se devolverá el de la primera posición.\r\n"
						+ "6.Consulta 4: Mostrar el nombre de los productos y su fabricante para aquellos productos cuya descripción \r\n"
						+ "incluya una subcadena. Se deberá mostrar la información ordenada según el nombre del fabricante de forma inversa al alfabeto.\r\n"
						+ "7.Consulta 5: Mostrar la cantidad total de productos en cada categoría (teniendo en cuenta el elemento disponibilidad)\r\n"
						+ " y calcular el porcentaje que representa respecto al total de productos.\r\n"
						+ "8. Atrás ");
				return sc.nextInt();
			}catch (Exception e) {
				// TODO: handle exception
			}
		}		
		
	}
	public static void bdXML() {
		//Nos conectamos a BaseX y abrimos nuestra base de datos 'productos'
		try(BaseXClient session=new BaseXClient("localhost",1984, "admin", "abc123")) {
			session.execute("open productos");
			int consulta=0;
			do {
				consulta=mostrarMenuXML(); //Mostramos el menu 
				switch (consulta) {
				case 1://Modificar el valor de un elemento de un XML según un ID
					int id=pedirInt("Introduce el id del producto a modificar");
					String campo=pedirString("Que campo desea modificar?");
					switch (campo) {
					case "nombre":
						String nombre=pedirString("Introduce el nuevo valor de 'nombre'");
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + "'"+nombre+"'");
						break;
					case "descripcion":
						System.out.println("Introduce el nuevo valor de 'descripcion'");
						String valor=sc.nextLine();
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + "'"+valor+"'");
						break;
					case "precio":
						double precio=pedirDouble("Introduce el nuevo valor de 'precio'");
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + precio);
						break;
					case "fabricante":
						System.out.println("Introduce el nuevo valor de 'fabricante'");
						String fabricante=sc.nextLine();
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + "'"+fabricante+"'");
						break;
					case "categoria":
						System.out.println("Introduce el nuevo valor de 'descripcion'");
						String categoria=sc.nextLine();
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + "'"+categoria+"'");
						break;
					case "disponibilidad":
						int disponibilidad=pedirInt("Introduce el nuevo valor de 'disponibilidad'");
						ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/"+campo+" with " + disponibilidad);
						break;
					case "especificaciones":
						String espec=pedirString("Introduce la especificación a cambiar");
						
						String query="for $producto in /productos/producto[id="+id+"]/especificaciones "
								+ "	return $producto";
						BaseXClient.Query baseXQuery;
						String productosXML = null;
						try {
							//Ejecutamos la query para obtener los productos
							baseXQuery = session.query(query);
						    productosXML = baseXQuery.execute();
							 // Parsear el resultado XML de la consulta de BaseX
						    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
						    DocumentBuilder builder = factory.newDocumentBuilder();
						    InputSource is = new InputSource(new StringReader(productosXML));
						    org.w3c.dom.Document doc = (org.w3c.dom.Document) builder.parse(is);

						    // Obtener el elemento producto
						    NodeList especificaciones = doc.getElementsByTagName("especificaciones");
						    Node esp = especificaciones.item(0);
						    
						    if(esp.equals(null)) {
								System.out.println("No existe ese producto, introduce otro.");
							}else {
								if (esp.getNodeType() == Node.ELEMENT_NODE) {
					                Element elemento = (Element) esp;
					                String valornuevo=pedirString("Introduce el nuevo valor de "+espec);
					                ejecutarConsulta(session, "replace value of node db:get('productos')//producto[id="+id+"]/especificaciones/"+espec+" with '" + valornuevo+"'");
					                	                     
					            }else {
					            	System.out.println("No existe esa especificacion");
					            }
							}
						}catch (Exception e) {
							// TODO: handle exception
						}
						break;
					default:
						break;
					}
					
					break;
				case 2://.Eliminar un producto según su ID.
					
					break;
				case 3://Consulta 1: Obtener todos los productos por orden alfabético del nombre
					//(se mostrarán los siguientes campos: id, nombre, precio, disponibilidad y categoria)
					
					ejecutarConsulta(session, 
							"for $producto in /productos/producto "
							+ "order by $producto/nombre "
							+ "return <producto>\"\r\n"
							+ "	{$producto/id}\"\r\n"
							+ "	{$producto/nombre}\"\r\n"
							+ "	{$producto/precio}\"\r\n"
							+ "	{$producto/disponibilidad}\"\r\n"
							+ "	{$producto/categoria}\"\n"
							+ "</producto>");
					break;
				case 4://Consulta 2: Listar productos con una disponibilidad mayor a X unidades 
					//(se mostrarán los siguientes campos: id, nombre, precio, disponibilidad y categoria)
					try {
						System.out.print("Introduce el numero de unidades:");
						int unidades=sc.nextInt();
						ejecutarConsulta(session,
								"for $producto in /productos/producto "
								+ "where number($producto/disponibilidad)>"+unidades+" "
								+ "return <producto>\"\r\n"
								+ "	{$producto/id}\"\r\n"
								+ "	{$producto/nombre}\"\r\n"
								+ "	{$producto/precio}\"\r\n"
								+ "	{$producto/disponibilidad}\"\r\n"
								+ "	{$producto/categoria}\"\n"
								+ "</producto>");
						
					} catch (Exception e) {
						System.out.println("Valor incorrecto");
					}
					
					break;
				case 5://Consulta 3: Mostrar la categoría, el nombre y el precio del producto más caro para cada categoría.
					//En el caso de haber varios se devolverá el de la primera posición.
					ejecutarConsulta(session, 
							"for $categoria in distinct-values(/productos/producto/categoria) "
							+ "let $productos := /productos/producto[categoria=$categoria] "
							+ "let $precio_max := max($productos/precio) "
							+ "let $nombre_producto := $productos[precio=$precio_max] "
							+ "return <producto>\"\r\n"
							+ "	<categoria>{$categoria}</categoria>\"\r\n"
							+ " 	<nombre>{$nombre_producto/nombre/text()}</nombre>\"\r\n"
							+ " 	<precio>{$precio_max}</precio>\"\r\n"
							+ "</producto>");
					
					break;
				case 6://Consulta 4: Mostrar el nombre de los productos y su fabricante para aquellos productos cuya descripción
					//incluya una subcadena. Se deberá mostrar la información ordenada según el nombre del fabricante de forma inversa al alfabeto
					String cadena=pedirString("Introduce una subcadena:");
					ejecutarConsulta(session,
							"for $producto in /productos/producto "
							+ "where contains($producto/descripcion,'" + cadena + "') "
							+ "order by $producto/fabricante descending "
							+ "return <producto>\"\r\n"
							+ "	{$producto/nombre}\"\r\n"
							+ "	{$producto/fabricante}\"\r\n"
							+ "</producto>");
					
					break;
				case 7://7.Consulta 5: Mostrar la cantidad total de productos en cada categoría 
					//(teniendo en cuenta el elemento disponibilidad)
					//y calcular el porcentaje que representa respecto al total de productos.
					
					ejecutarConsulta(session, 
						    "for $categoria in distinct-values(/productos/producto/categoria) "
						    + "let $productos := /productos/producto[categoria = $categoria] "
						    + "let $cantidad_total := sum($productos/disponibilidad) "
						    + "let $total_productos := sum(/productos/producto/disponibilidad) "
						    + "let $porcentaje := ($cantidad_total * 100) div $total_productos "
						    + "return <producto>\"\r\n"
						    + "	<categoria>{$categoria}</categoria>\"\r\n"
						    + "	<cantidad_total>{$cantidad_total}</cantidad_total>\"\r\n"
						    + "	<porcentaje>{$porcentaje}</porcentaje>\"\r\n"
						    + "</producto>");

					
					break;
				case 8:
					session.close();
					break;
				default:
					break;
				}
			} while (consulta!=8);
		} catch (Exception e) {}
	}
	
	
	public static void conectarBaseX() {
		try {
			session=new BaseXClient("localhost",1984, "admin", "abc123");
			session.execute("open productos");
		}catch (Exception e) {
			// TODO: handle exception
		}
	}

	public static String pedirString(String texto) {
		while (true) {
			try {
				System.out.println(texto);
				return sc.next();
			} catch (Exception e) {}
			
		}
	}
	 private static int pedirInt(String mensaje) {
	        System.out.println(mensaje);
	        while(true) {
	            try {
	                return sc.nextInt();
	            } catch (Exception ignored) {
	            }
	        }
	 }
	 private static double pedirDouble(String mensaje) {
	        System.out.println(mensaje);
	        while(true) {
	            try {
	                return Double.parseDouble(sc.next());
	            } catch (Exception ignored) {
	            }
	        }
	    }
	public static void ejecutarConsulta(BaseXClient sesion, String consulta) {
		try (BaseXClient.Query query=sesion.query(consulta)){
			while(query.more()) {
				System.out.println(query.next());
			}
			
		} catch (Exception e) {
			System.out.println("Consulta incorrecta:\n" + e.getMessage());
		}
	}

}
